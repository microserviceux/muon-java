import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://maven.tmatesoft.com/content/repositories/releases/'
        }
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
    dependencies {
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.2.0')
        classpath "io.franzbecker:gradle-lombok:1.8"
    }
}

apply plugin: 'git'

def globalVersion = new Version(currentVersion)

project.version = currentVersion.toString()

ext {
    reactiveStreamsVersion = '1.0.0'
    reactorVersion = '2.0.7.RELEASE'
}

subprojects { subproject ->
    apply plugin: 'groovy'

    group = "io.muoncore"
    version = globalVersion.toString()

    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:2.4.8"
        testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
        testCompile 'cglib:cglib:2.2.2'
        testCompile 'org.objenesis:objenesis:2.4'
    }

    compileJava {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    compileTestJava {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    repositories {
        jcenter()
    }
}

subprojects { subproject ->
    if (subproject.name in ["muon-examples", "doc"]) return
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"
    apply plugin:'io.franzbecker.gradle-lombok'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

// ----------- Deployment --------------
    artifactory {
        contextUrl = 'https://simplicityitself.artifactoryonline.com/simplicityitself/'   //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey = 'muon'   //The Artifactory repository key to publish to
                username = 'sergio'          //The publisher user name
                password = 'cistechfutures'       //The publisher password
            }
            defaults {
                publications ('mavenJava')
                publishArtifacts = true
                publishPom = true
            }
        }
        resolve {
            repository {
                repoKey = 'repo'  //The Artifactory (preferably virtual) repository key to resolve from
            }
        }
    }

    if (project.plugins.hasPlugin('java')) {
        // manifest.mainAttributes(provider: 'gradle')
        configurations {
            published
        }


        dependencies {
            testCompile 'junit:junit:4.7'
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Add the sourceJars to non-extractor modules
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}

configurations {
    published
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
