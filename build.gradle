import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://maven.tmatesoft.com/content/repositories/releases/'
        }
    }
    dependencies {
        classpath 'me.trnl:github-release-gradle-plugin:0.1'
        classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.2.0')
    }
}

apply plugin: 'release'
apply plugin: 'console'
apply plugin: 'git'

def globalVersion = new Version(currentVersion)



project.version = currentVersion.toString()

release {
    /* Let's check that everything is committed */
//    doFirst {
//        if (!project.git.status().isEmpty()) {
//            throw new GradleException('You have uncommitted changes.')
//        }
//    }

    /* Ask user for a release version, suggesting some default variant. */
    version = {
        def (version, message) = deriveReleaseVersion()
        console.prompt(
"""
Current feature version is ${project.version}
Last Fix release was ${latestFix}
> enter next release version:""", version)
    }
    tag = { "r$project.release.version" }
    commitMessage = { "Release $project.release.version" }

    /* Files and projects that needs to be updated with a new release version. */
    update {
        file project.file('gradle.properties')
    }

    /* Spec for next version. As above, asking user input. */
    next {
        version = { console.prompt(' > Please enter next version:', project.release.version) }
        commitMessage = { "Bumping version to $project.release.next.version" }
    }

    /* Tasks that needs to be performed during release. Will be done after tag step. */
    dependsOn { subprojects.findAll { !(it.name in ["muon-tck", "doc"]) }*.assemble }
}

//replace current release with the snapshot.
commitNewVersion.doFirst {

    def propFile = new File("gradle.properties")
    Properties props = new Properties()
    propFile.withReader {
        props.load(it)
    }

    String releaseVersion = project.release.next.version

    def split = releaseVersion.split("\\.")
    def version = "${split[0]}.${split[1]}"

    props.put("currentVersion", (version + "-SNAPSHOT").toString())

    println "Checking tags for version ${version}"

    //String ret = git.exec(project.projectDir, "tag")

//    println "Tags is ${ret}"

    def tags = []

//    ret.eachLine {
//        if (it.startsWith("r${version}")) {
//            tags << it.trim()
//        }
//    }
//
//    println "There are ${tags.size()} fix tags for this feature version"
//
//    def fixes = tags.collect {
//        Integer.parseInt(it.split("\\.")[2])
//    }
//    int latest = 0
//    if (fixes.size() > 0) {
//        latest = fixes.sort().last()
//    }
//
//    latest++
//
//    println "The latest fix is ${latest}"
//
//    props.put("latestFix", "$latest".toString())
//
//    propFile.withWriter {
//        props.store(it, "")
//    }
}
//
def deriveReleaseVersion() {
    def branch = git.currentBranch(project.projectDir)
    def suggested = project.version - '-SNAPSHOT'
    def message

    message = "feature release"
    println "Performing Feature release"

    def fix = Integer.parseInt(latestFix) + 1
    def version = (project.version - '-SNAPSHOT')

    suggested = "${version}.${fix}"

    return [suggested, message]
}
//
//def bumpVersion(String version) {
//    def branch = git.currentBranch(project.projectDir)
//
//    def split = version.split("\\.")
//
//    if (branch == "master") {
//        return "${split[0]}.${++split[1]}"
//    } else {
//        return "${split[0]}.${split[1]}"
//    }
//}

// ---------  Github release setup -----------
//github {
//    /* Wiki repo will be calculated from this. */
//    repo = 'git@github.com:microserviceux/muon-java.git'
//
//    release {
//        /* Use {} brackets for lazy evaluation */
//        tag = { "r$project.release.version" }
//        name = { "$project.release.version" }
//    }
//}

// ---------- Regular build ----------
ext {
    gradleVersion = '2.4'

    reactiveStreamsVersion = '1.0.0'

    reactorVersion = '2.0.7.RELEASE'
}

subprojects { subproject ->
    apply plugin: 'groovy'

    group = "io.muoncore"
    version = globalVersion.toString()

    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:2.4.1"
        testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
        testCompile 'cglib:cglib:2.2.2'
        testCompile 'org.objenesis:objenesis:2.4'
    }

    compileJava {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    compileTestJava {
        sourceCompatibility = "1.8"
        targetCompatibility = "1.8"
    }

    repositories {
        jcenter()
    }
}

subprojects { subproject ->
    if (subproject.name in ["muon-examples", "doc"]) return
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.artifactory"

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
    }

// ----------- Deployment --------------
    artifactory {
        contextUrl = 'https://simplicityitself.artifactoryonline.com/simplicityitself/'   //The base Artifactory URL if not overridden by the publisher/resolver
        publish {
            repository {
                repoKey = 'muon'   //The Artifactory repository key to publish to
                username = 'sergio'          //The publisher user name
                password = 'cistechfutures'       //The publisher password
            }
            defaults {
                publications ('mavenJava')
                publishArtifacts = true
                publishPom = true
            }
        }
        resolve {
            repository {
                repoKey = 'repo'  //The Artifactory (preferably virtual) repository key to resolve from
            }
        }
    }

    if (project.plugins.hasPlugin('java')) {
        // manifest.mainAttributes(provider: 'gradle')
        configurations {
            published
        }


        dependencies {
            testCompile 'junit:junit:4.7'
        }

        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Add the sourceJars to non-extractor modules
        artifacts {
            published sourceJar
            published javadocJar
        }
    }
}

project('muon-core') {
    description = 'Core Muon for Java'
    dependencies {
        // Reactive Streams
        compile "org.reactivestreams:reactive-streams:$reactiveStreamsVersion"
        compile 'com.google.guava:guava:18.0'

        //Gson codec (the default)
        compile 'com.google.code.gson:gson:2.3.1'
        compile "io.projectreactor:reactor-stream:$reactorVersion"
        compile 'org.slf4j:slf4j-api:1.7.21'
        testCompile 'org.slf4j:slf4j-simple:1.7.12'
    }
}

project('muon-examples') {
    apply plugin: 'groovy'

    description = 'Examples of usage'

    repositories {
        maven { url 'http://repo.spring.io/libs-milestone' }
    }

    dependencies {
        compile project(":muon-core")
        compile project(":muon-transport-amqp")
        compile project(":muon-discovery-amqp")
        compile project(":muon-codec-kryo")
        compile project(":muon-event")
        compile project(":muon-discovery-multicast")
        compile "io.projectreactor:reactor-stream:$reactorVersion"
        compile 'org.slf4j:slf4j-simple:1.7.12'
    }
}

project('muon-event') {
    description = 'Event handling'
    dependencies {
        compile project(":muon-core")
    }
}

project('muon-transport-amqp') {
    description = 'Core Muon for Java'
    dependencies {
        compile project(":muon-core")
        compile "com.rabbitmq:amqp-client:3.3.2"
        testCompile "io.projectreactor:reactor-stream:$reactorVersion"
    }
}

project('muon-discovery-amqp') {
    description = 'A discovery system running on AMQP'
    dependencies {
        compile project(":muon-transport-amqp")
    }
}

project('muon-discovery-multicast') {
    description = 'Multicast based discovery'
    dependencies {
        compile project(":muon-core")
    }
}

project('muon-codec-kryo') {
    description = 'Codec implementation using Kryo (for communication with other JVMs only)'
    dependencies {
        compile project(":muon-core")
        compile 'com.esotericsoftware:kryo-shaded:3.0.0'
    }
}

project('doc') {
    description = 'Documentation project'
    dependencies {
        compile project(":muon-event")
        compile project(":muon-transport-amqp")
        compile project(":muon-discovery-amqp")
        compile "org.springframework.boot:spring-boot-starter-web:1.3.1.RELEASE"
        compile 'io.reactivex.rxjava2:rxjava:2.0.3'

        compile "org.codehaus.groovy:groovy-all:2.4.1"
        compile 'org.apache.ivy:ivy:2.4.0'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

configurations {
    published
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
